org: hungdinh
app: aws-rt-chat
service: aws-rt-chat
frameworkVersion: '3'

plugins:
    - serverless-esbuild
    - serverless-offline

custom:
    tableName: 'MAIN_TABLE'
    serverless-offline:
        host: 127.0.0.1
        ignoreJWTSignature: true

provider:
    name: aws
    stage: dev
    runtime: nodejs16.x
    region: ap-southeast-1
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                      - dynamodb:BatchGetItem
                      - dynamodb:BatchWriteItem
                      - dynamodb:TransactGetItems
                      - dynamodb:TransactWriteItems
                  Resource:
                      - Fn::GetAtt: [MainTable, Arn]
                      - Fn::Join: [/, [Fn::GetAtt: [MainTable, Arn], 'index', 'gsi1']]
    httpApi:
        payload: '2.0'
        cors:
            allowedHeaders:
                - Content-Type
                - Authorization
            allowedMethods:
                - GET
                - POST
                - OPTIONS
            allowedOrigins: '*'
            allowCredentials: true
        authorizers:
            customAuthorizer:
                type: request
                functionName: customAuthorizer
                identitySource: [$request.header.Authorization]
                resultTtlInSeconds: 300
                identityValidationExpression: 'Bearer .*'
    environment:
        MAIN_TABLE: ${self:custom.tableName}

functions:
    # Authorizer middleware
    customAuthorizer:
        handler: './src/handlers/auth/index.authorizer'

    # Auth API
    ## Login route: Post /auth/login
    login:
        handler: './src/handlers/auth/index.login'
        events:
            - httpApi:
                  path: /auth/login
                  method: post
    ## Register route: Post /auth/register
    register:
        handler: './src/handlers/auth/index.register'
        events:
            - httpApi:
                  path: /auth/register
                  method: post

    # USERS API
    ## Get all users route: Get /users
    getUsers:
        handler: './src/handlers/users/index.getUsers'
        events:
            - httpApi:
                  path: /users
                  method: get
                  authorizer:
                      name: customAuthorizer
    ## Get user by id route: Get /users/{id}
    getUser:
        handler: './src/handlers/users/index.getUser'
        events:
            - httpApi:
                  path: /users/{id}
                  method: get
                  authorizer:
                      name: customAuthorizer
    
    # ROOMS API
    ## Get all rooms route: Get /rooms
    getRooms:
        handler: './src/handlers/rooms/index.getRooms'
        events:
            - httpApi:
                  path: /rooms
                  method: get
                  authorizer:
                      name: customAuthorizer
    ## Get room by id route: Get /rooms/{id}
    getRoom:
        handler: './src/handlers/rooms/index.getRoom'
        events:
            - httpApi:
                  path: /rooms/{id}
                  method: get
                  authorizer:
                      name: customAuthorizer
    ## Get room messages route: Get /rooms/{id}/messages
    getMessages:
        handler: './src/handlers/rooms/index.getMessages'
        events:
            - httpApi:
                  path: /rooms/{id}/messages
                  method: get
                  authorizer:
                      name: customAuthorizer

    # WEBSOCKET API
    wsOnConnect:
        handler: './src/handlers/websocket/index.wsOnConnect'
        events:
            - websocket:
                  route: $connect
                  #   authorizer: customAuthorizer
                  routeResponseSelectionExpression: $default
    wsOnDisconnect:
        handler: './src/handlers/websocket/index.wsOnDisconnect'
        events:
            - websocket:
                  route: $disconnect
                  #   authorizer: customAuthorizer
                  routeResponseSelectionExpression: $default
    wsDefault:
        handler: './src/handlers/websocket/index.wsDefault'
        events:
            - websocket:
                  route: $default
                  #   authorizer: customAuthorizer

    # Auth Websocket API
    wsAuth:
        handler: './src/handlers/websocket/index.wsAuth'
        events:
            - websocket:
                  route: auth
                  #   authorizer: customAuthorizer
                  routeResponseSelectionExpression: $default

    # CHAT WEBSOCKET API
    wsOnCreateRoom:
        handler: './src/handlers/rooms/index.wsOnCreateRoom'
        events:
            - websocket:
                  route: createRoom
                  #   authorizer: customAuthorizer
                  routeResponseSelectionExpression: $default
    wsOnCreateMessage:
        handler: './src/handlers/rooms/index.wsOnCreateMessage'
        events:
            - websocket:
                  route: createMessage
                  #   authorizer: customAuthorizer
                  routeResponseSelectionExpression: $default

resources:
    Resources:
        MainTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: pk
                      AttributeType: S
                    - AttributeName: sk
                      AttributeType: S
                    - AttributeName: gsi1pk
                      AttributeType: S
                    - AttributeName: gsi1sk
                      AttributeType: S
                    - AttributeName: gsi2pk
                      AttributeType: S
                    - AttributeName: gsi2sk
                      AttributeType: S
                KeySchema:
                    - AttributeName: pk
                      KeyType: HASH
                    - AttributeName: sk
                      KeyType: RANGE
                GlobalSecondaryIndexes:
                    - IndexName: gsi1
                      KeySchema:
                          - AttributeName: gsi1pk
                            KeyType: HASH
                          - AttributeName: gsi1sk
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                    - IndexName: gsi2
                      KeySchema:
                          - AttributeName: gsi2pk
                            KeyType: HASH
                          - AttributeName: gsi2sk
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:custom.tableName}
