org: hungdinh
app: aws-rt-chat
service: aws-rt-chat
frameworkVersion: '3'

plugins:
    - serverless-esbuild
    - serverless-offline

custom:
    tableName: 'MAIN_TABLE'

provider:
    name: aws
    stage: dev
    runtime: nodejs14.x
    region: ap-southeast-1
    logs:
        websocket: true
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                      - dynamodb:BatchGetItem
                      - dynamodb:BatchWriteItem
                      - dynamodb:TransactGetItems
                      - dynamodb:TransactWriteItems
                  Resource:
                      - Fn::GetAtt: [MainTable, Arn]
                      - Fn::Join: [/, [Fn::GetAtt: [MainTable, Arn], 'index', 'gsi1']]
    environment:
        MAIN_TABLE: ${self:custom.tableName}

functions:
    # Auth API
    login:
        handler: './src/handlers/auth/index.login'
        events:
            - http:
                  path: /auth/login
                  method: post
                  cors: true
    register:
        handler: './src/handlers/auth/index.register'
        events:
            - http:
                  path: /auth/register
                  method: post
                  cors: true

    # USERS API
    getUsers:
        handler: './src/handlers/users/index.getUsers'
        events:
            - http:
                  path: /users
                  method: get
                  cors: true
    getUser:
        handler: './src/handlers/users/index.getUser'
        events:
            - http:
                  path: /users/{id}
                  method: get
                  cors: true

    # WEBSOCKET API
    wsOnConnect:
        handler: './src/handlers/ws/index.wsOnConnect'
        events:
            - websocket:
                  route: $connect
                  routeResponseSelectionExpression: $default
    wsOnDisconnect:
        handler: './src/handlers/ws/index.wsOnDisconnect'
        events:
            - websocket:
                  route: $disconnect
                  routeResponseSelectionExpression: $default
    wsDefault:
        handler: './src/handlers/ws/index.wsDefault'
        events:
            - websocket:
                  route: $default
                  routeResponseSelectionExpression: $default

    # CHAT WEBSOCKET API
    wsOnCreateRoom:
        handler: './src/handlers/ws/room/index.wsOnCreateRoom'
        events:
            - websocket:
                  route: createRoom
                  routeResponseSelectionExpression: $default
resources:
    Resources:
        MainTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: pk
                      AttributeType: S
                    - AttributeName: sk
                      AttributeType: S
                    - AttributeName: gsi1pk
                      AttributeType: S
                    - AttributeName: gsi1sk
                      AttributeType: S
                KeySchema:
                    - AttributeName: pk
                      KeyType: HASH
                    - AttributeName: sk
                      KeyType: RANGE
                GlobalSecondaryIndexes:
                    - IndexName: gsi1
                      KeySchema:
                          - AttributeName: gsi1pk
                            KeyType: HASH
                          - AttributeName: gsi1sk
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:custom.tableName}
